
driver_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003bc  080003bc  00002064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003bc  080003bc  00002064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080003bc  080003bc  000013bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080003c4  080003c4  00002064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080003cc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000064  08000430  00002064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08000430  000020cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a9a  00000000  00000000  0000208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000373  00000000  00000000  00002b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00002ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a9  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f67  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014ca  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009153  00000000  00000000  00005472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000e5c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c8  00000000  00000000  0000e608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0000e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	080003a4 	.word	0x080003a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	080003a4 	.word	0x080003a4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <SysTick_Handler>:
	*SYST_CSR |=(0x1 << 2);
	// enable count
	*SYST_CSR |= (0x1 <<0);
}
uint32_t tick =0;
void SysTick_Handler(){
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
	tick ++;
 8000184:	4b04      	ldr	r3, [pc, #16]	@ (8000198 <SysTick_Handler+0x18>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	3301      	adds	r3, #1
 800018a:	4a03      	ldr	r2, [pc, #12]	@ (8000198 <SysTick_Handler+0x18>)
 800018c:	6013      	str	r3, [r2, #0]
}
 800018e:	bf00      	nop
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	20000080 	.word	0x20000080

0800019c <USART_GetFlag>:
		config |= (0x1 << USART_CR3_CTSE);
		config |= (0x1 << USART_CR3_RTSE);
	}
	USART_Handle->USARTx->CR3 = config;
}
uint8_t USART_GetFlag(USART_RegDef_t *USARTx, uint16_t FlagStatus){
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	460b      	mov	r3, r1
 80001a6:	807b      	strh	r3, [r7, #2]
	uint8_t flag = FLAG_RESET;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
	if(USARTx->SR & FlagStatus){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	887b      	ldrh	r3, [r7, #2]
 80001b2:	4013      	ands	r3, r2
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <USART_GetFlag+0x20>
		flag = FLAG_SET;
 80001b8:	2301      	movs	r3, #1
 80001ba:	73fb      	strb	r3, [r7, #15]
	}
	return flag;
 80001bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <USART_SendData>:
void USART_SendData(USART_Handle_t *pHandle_uart, uint8_t *pTxBuffer, uint32_t len){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	uint16_t *data;
	for (uint32_t i=0;i< len ;i++){
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]
 80001d8:	e02e      	b.n	8000238 <USART_SendData+0x70>
		while (USART_GetFlag(pHandle_uart->USARTx, USART_FLAG_TX) != FLAG_SET);
 80001da:	bf00      	nop
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2140      	movs	r1, #64	@ 0x40
 80001e2:	4618      	mov	r0, r3
 80001e4:	f7ff ffda 	bl	800019c <USART_GetFlag>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d1f6      	bne.n	80001dc <USART_SendData+0x14>
		if(pHandle_uart->USART_Config.USART_Wordlenght == USART_9BIT_DATA){
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	795b      	ldrb	r3, [r3, #5]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d115      	bne.n	8000222 <USART_SendData+0x5a>
			data = (uint16_t *)pTxBuffer;
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	613b      	str	r3, [r7, #16]
			pHandle_uart->USARTx->DR = ((*data)&(uint16_t)0x1FF);
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	461a      	mov	r2, r3
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000208:	605a      	str	r2, [r3, #4]
			if(pHandle_uart->USART_Config.USART_Parity == USART_PARTY_DISABLE){
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	7a1b      	ldrb	r3, [r3, #8]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d103      	bne.n	800021a <USART_SendData+0x52>
				pTxBuffer+=2;
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	3302      	adds	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
 8000218:	e00b      	b.n	8000232 <USART_SendData+0x6a>
			}
			else{
				pTxBuffer++;
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	3301      	adds	r3, #1
 800021e:	60bb      	str	r3, [r7, #8]
 8000220:	e007      	b.n	8000232 <USART_SendData+0x6a>
			}
		}
		else {

			pHandle_uart->USARTx->DR = *pTxBuffer;
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	781a      	ldrb	r2, [r3, #0]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	3301      	adds	r3, #1
 8000230:	60bb      	str	r3, [r7, #8]
	for (uint32_t i=0;i< len ;i++){
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	3301      	adds	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
 8000238:	697a      	ldr	r2, [r7, #20]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3cc      	bcc.n	80001da <USART_SendData+0x12>
		}
	}

}
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <main>:
USART_Handle_t USARTHandle1;
GPIO_Handle_t GPIOHandle1, GPIOHandle2;
char message[100] = "dinh van";
void DV_USART_Inits();
void DV_GPIO_Inits();
int main(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	DV_GPIO_Inits();
 8000250:	f000 f830 	bl	80002b4 <DV_GPIO_Inits>
	DV_USART_Inits();
 8000254:	f000 f80e 	bl	8000274 <DV_USART_Inits>
	while(1){
		USART_SendData(&USARTHandle1, (uint8_t *)message , strlen(message));
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <main+0x20>)
 800025a:	f7ff ff89 	bl	8000170 <strlen>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	4902      	ldr	r1, [pc, #8]	@ (800026c <main+0x20>)
 8000264:	4802      	ldr	r0, [pc, #8]	@ (8000270 <main+0x24>)
 8000266:	f7ff ffaf 	bl	80001c8 <USART_SendData>
 800026a:	e7f5      	b.n	8000258 <main+0xc>
 800026c:	20000000 	.word	0x20000000
 8000270:	20000084 	.word	0x20000084

08000274 <DV_USART_Inits>:
	}
	return 0;
}

void DV_USART_Inits(){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

	USARTHandle1.USARTx = USART1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <DV_USART_Inits+0x38>)
 800027a:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <DV_USART_Inits+0x3c>)
 800027c:	601a      	str	r2, [r3, #0]
	USARTHandle1.USART_Config.USART_Mode = USART_MODE_TX_RX;
 800027e:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <DV_USART_Inits+0x38>)
 8000280:	2202      	movs	r2, #2
 8000282:	711a      	strb	r2, [r3, #4]
	USARTHandle1.USART_Config.USART_Parity = USART_PARTY_DISABLE;
 8000284:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <DV_USART_Inits+0x38>)
 8000286:	2200      	movs	r2, #0
 8000288:	721a      	strb	r2, [r3, #8]
	USARTHandle1.USART_Config.USART_Wordlenght = USART_8BIT_DATA;
 800028a:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <DV_USART_Inits+0x38>)
 800028c:	2200      	movs	r2, #0
 800028e:	715a      	strb	r2, [r3, #5]
	USARTHandle1.USART_Config.USART_Stop = USART_STOP_1BIT;
 8000290:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <DV_USART_Inits+0x38>)
 8000292:	2200      	movs	r2, #0
 8000294:	725a      	strb	r2, [r3, #9]
	USARTHandle1.USART_Config.HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000296:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <DV_USART_Inits+0x38>)
 8000298:	2200      	movs	r2, #0
 800029a:	729a      	strb	r2, [r3, #10]
	USARTHandle1.USART_Config.Baudrate = USART_STD_BAUD_115200;
 800029c:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <DV_USART_Inits+0x38>)
 800029e:	f44f 4242 	mov.w	r2, #49664	@ 0xc200
 80002a2:	80da      	strh	r2, [r3, #6]

}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	20000084 	.word	0x20000084
 80002b0:	40013800 	.word	0x40013800

080002b4 <DV_GPIO_Inits>:
void DV_GPIO_Inits(){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	// USART_TX PA9
	// USART_RX PA10
	GPIOHandle1.GPIOx =GPIOA;
 80002b8:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <DV_GPIO_Inits+0x48>)
 80002ba:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <DV_GPIO_Inits+0x4c>)
 80002bc:	601a      	str	r2, [r3, #0]
	GPIOHandle1.GPIOConfig.GPIO_Mode = GPIO_MODE_ALT_PP;
 80002be:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <DV_GPIO_Inits+0x48>)
 80002c0:	2203      	movs	r2, #3
 80002c2:	609a      	str	r2, [r3, #8]
	GPIOHandle1.GPIOConfig.GPIO_Pin_Number = GPIO_PIN_9;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	@ (80002fc <DV_GPIO_Inits+0x48>)
 80002c6:	2209      	movs	r2, #9
 80002c8:	605a      	str	r2, [r3, #4]
	GPIOHandle1.GPIOConfig.GPIO_Speed = GPIO_OUT_SPEED_10MHZ;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <DV_GPIO_Inits+0x48>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	611a      	str	r2, [r3, #16]
	GPIOHandle1.GPIOConfig.GPIO_type = GPIO_NOPULL;
 80002d0:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <DV_GPIO_Inits+0x48>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]

	GPIOHandle2.GPIOx =GPIOA;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <DV_GPIO_Inits+0x50>)
 80002d8:	4a09      	ldr	r2, [pc, #36]	@ (8000300 <DV_GPIO_Inits+0x4c>)
 80002da:	601a      	str	r2, [r3, #0]
	GPIOHandle2.GPIOConfig.GPIO_Mode = GPIO_MODE_ALT_PP;
 80002dc:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <DV_GPIO_Inits+0x50>)
 80002de:	2203      	movs	r2, #3
 80002e0:	609a      	str	r2, [r3, #8]
	GPIOHandle2.GPIOConfig.GPIO_Pin_Number = GPIO_PIN_10;
 80002e2:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <DV_GPIO_Inits+0x50>)
 80002e4:	220a      	movs	r2, #10
 80002e6:	605a      	str	r2, [r3, #4]
	GPIOHandle2.GPIOConfig.GPIO_Speed = GPIO_OUT_SPEED_10MHZ;
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <DV_GPIO_Inits+0x50>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	611a      	str	r2, [r3, #16]
	GPIOHandle2.GPIOConfig.GPIO_type = GPIO_NOPULL;
 80002ee:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <DV_GPIO_Inits+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	200000a4 	.word	0x200000a4
 8000300:	40010800 	.word	0x40010800
 8000304:	200000b8 	.word	0x200000b8

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	@ (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	@ (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	@ (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	@ (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	@ (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 f811 	bl	800035c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ff87 	bl	800024c <main>

0800033e <LoopForever>:

LoopForever:
  b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800034c:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000350:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000354:	200000cc 	.word	0x200000cc

08000358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC1_2_IRQHandler>
	...

0800035c <__libc_init_array>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	2600      	movs	r6, #0
 8000360:	4d0c      	ldr	r5, [pc, #48]	@ (8000394 <__libc_init_array+0x38>)
 8000362:	4c0d      	ldr	r4, [pc, #52]	@ (8000398 <__libc_init_array+0x3c>)
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	42a6      	cmp	r6, r4
 800036a:	d109      	bne.n	8000380 <__libc_init_array+0x24>
 800036c:	f000 f81a 	bl	80003a4 <_init>
 8000370:	2600      	movs	r6, #0
 8000372:	4d0a      	ldr	r5, [pc, #40]	@ (800039c <__libc_init_array+0x40>)
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <__libc_init_array+0x44>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	42a6      	cmp	r6, r4
 800037c:	d105      	bne.n	800038a <__libc_init_array+0x2e>
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f855 3b04 	ldr.w	r3, [r5], #4
 8000384:	4798      	blx	r3
 8000386:	3601      	adds	r6, #1
 8000388:	e7ee      	b.n	8000368 <__libc_init_array+0xc>
 800038a:	f855 3b04 	ldr.w	r3, [r5], #4
 800038e:	4798      	blx	r3
 8000390:	3601      	adds	r6, #1
 8000392:	e7f2      	b.n	800037a <__libc_init_array+0x1e>
 8000394:	080003c4 	.word	0x080003c4
 8000398:	080003c4 	.word	0x080003c4
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c8 	.word	0x080003c8

080003a4 <_init>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr

080003b0 <_fini>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr
